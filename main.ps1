#Requires -Version 5
#Requires -RunAsAdministrator

<#
.SYNOPSIS
    Script Modular de Manuten√ß√£o Windows - UFG Campus Aparecida
.DESCRIPTION
    Execute com: irm RAW_URL_MAIN | iex
.NOTES
    Vers√£o: 2.2
    Autor: Departamento de TI UFG
#>

function Show-Menu {
    Clear-Host
    # Logo UFG em ASCII Art
    Write-Host @"  

	 ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
	 ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù 
	 ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó
	 ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë
	 ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë     ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
	  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù      ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù 

    Universidade Federal de Goi√°s
"@ -ForegroundColor Blue

    Write-Host "`n          Campus Aparecida`n" -ForegroundColor Yellow
    Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Cyan
    Write-Host " 1. üîÑ Atualizar Pol√≠ticas de Grupo" -ForegroundColor Green
    Write-Host " 2. üõí Resetar Loja Windows" -ForegroundColor Blue
    Write-Host " 3. üìú Listar Programas Instalados" -ForegroundColor Magenta
    Write-Host " 4. üíª Alterar Nome do Computador" -ForegroundColor Cyan
    Write-Host " 5. üèõ Aplicar GPOs da FCT" -ForegroundColor Green
    Write-Host " 6. üßπ Restaurar GPOs Padr√£o do Windows" -ForegroundColor Blue
    Write-Host " 7. üöÄ Reiniciar Computador" -ForegroundColor Red
    Write-Host " 8. ‚ùå Sair do Script" -ForegroundColor DarkGray
    Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Cyan
}

function Invoke-PressKey {
    Read-Host "`nPressione Enter para continuar..."
}

function Testar-Admin {
    if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
        Write-Host "[‚ö†Ô∏è] Elevando privil√©gios..." -ForegroundColor Yellow
        Start-Process powershell "-NoProfile -ExecutionPolicy Bypass -Command `"irm https://raw.githubusercontent.com/diegogyn/ScritpsDiversos/refs/heads/master/main.ps1 | iex`"" -Verb RunAs
        exit
    }
}

function Atualizar-PoliticasGrupo {
    try {
        Write-Host "`n[üîÑ] For√ßando atualiza√ß√£o de pol√≠ticas..." -ForegroundColor Yellow
        $output = gpupdate /force 2>&1
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "[‚úÖ] Atualiza√ß√£o conclu√≠da: $($output -join ' ')" -ForegroundColor Green
        }
        else {
            Write-Host "[‚ùå] Erro ${LASTEXITCODE}: $output" -ForegroundColor Red
        }
    }
    catch {
        Write-Host "[‚ùó] Erro cr√≠tico: $($_.Exception.Message)" -ForegroundColor Red
    }
    finally {
        Invoke-PressKey
    }
}

function Reiniciar-LojaWindows {
    try {
        Write-Host "`n[üõ†Ô∏è] Iniciando reset avan√ßado da Microsoft Store..." -ForegroundColor Yellow
        
        $etapas = @(
            @{Nome = "Resetando ACLs"; Comando = { icacls "C:\Program Files\WindowsApps" /reset /t /c /q | Out-Null }},
            @{Nome = "Executando WSReset"; Comando = { Start-Process wsreset -NoNewWindow }},
            @{Nome = "Finalizando processos"; Comando = { taskkill /IM wsreset.exe /IM WinStore.App.exe /F | Out-Null }}
        )

        foreach ($etapa in $etapas) {
            Write-Host "‚îú‚îÄ $($etapa.Nome)..." -ForegroundColor Cyan
            & $etapa.Comando
            
            if ($etapa.Nome -eq "Executando WSReset") {
                Write-Host "‚îÇ  Aguardando conclus√£o..." -ForegroundColor DarkGray
                Start-Sleep -Seconds 30
            }
        }
        
        Write-Host "[‚úÖ] Loja reinicializada com sucesso!`n" -ForegroundColor Green
    }
    catch {
        Write-Host "[‚ùó] Falha no processo: $($_.Exception.Message)" -ForegroundColor Red
    }
    finally {
        Invoke-PressKey
    }
}

function Listar-ProgramasInstalados {
    try {
        $dateStamp = Get-Date -Format "yyyyMMdd-HHmmss"
        $fileName = "apps-instalados-$dateStamp.txt"
        $documentsPath = [Environment]::GetFolderPath("MyDocuments")
        $filePath = Join-Path -Path $documentsPath -ChildPath $fileName

        Write-Host "`n[üîç] Coletando dados de programas instalados..." -ForegroundColor Yellow
        
        $registryPaths = @(
            "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*",
            "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*"
        )

        $apps = $registryPaths | ForEach-Object {
            Get-ItemProperty $_ | Where-Object DisplayName -ne $null
        } | Sort-Object DisplayName

        $apps | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate |
            Format-Table -AutoSize |
            Out-File -FilePath $filePath -Width 200

        Write-Host "[üìÇ] Relat√≥rio gerado: $filePath" -ForegroundColor Green
        Write-Host "[‚ÑπÔ∏è] Programas encontrados: $($apps.Count)" -ForegroundColor Cyan
    }
    catch {
        Write-Host "[‚ùó] Erro na gera√ß√£o do relat√≥rio: $($_.Exception.Message)" -ForegroundColor Red
    }
    finally {
        Invoke-PressKey
    }
}

function Alterar-NomeComputador {
    try {
        $currentName = $env:COMPUTERNAME
        Write-Host "`n[üíª] Nome atual do computador: $currentName" -ForegroundColor Cyan
        
        do {
            $newName = Read-Host "`nDigite o novo nome (15 caracteres alfanum√©ricos)"
        } until ($newName -match '^[a-zA-Z0-9-]{1,15}$')

        if ((Read-Host "`nConfirma altera√ß√£o para '$newName'? (S/N)") -eq 'S') {
            Rename-Computer -NewName $newName -Force -ErrorAction Stop
            Write-Host "[‚úÖ] Nome alterado com sucesso!" -ForegroundColor Green
            
            if ((Read-Host "`nReiniciar agora? (S/N)") -eq 'S') {
                shutdown /r /f /t 15
                exit
            }
        }
    }
    catch {
        Write-Host "[‚ùó] Erro na opera√ß√£o: $($_.Exception.Message)" -ForegroundColor Red
    }
    finally {
        Invoke-PressKey
    }
}

function Aplicar-GPOsFCT {
    try {
        Write-Host "`n[üèõÔ∏è] Conectando ao servidor de pol√≠ticas..." -ForegroundColor DarkMagenta
        
        $gpoPaths = @{
            User    = "\\fog\gpos\user.txt"
            Machine = "\\fog\gpos\machine.txt"
        }

        if (-not (Test-Path $gpoPaths.User)) { throw "Arquivo User GPO n√£o encontrado" }
        if (-not (Test-Path $gpoPaths.Machine)) { throw "Arquivo Machine GPO n√£o encontrado" }

        $gpoPaths.GetEnumerator() | ForEach-Object {
            Write-Host "‚îú‚îÄ Aplicando pol√≠tica $($_.Key)..." -ForegroundColor Cyan
            & "\\fog\gpos\lgpo.exe" /t $_.Value 2>&1 | Out-Null
            if ($LASTEXITCODE -ne 0) { throw "Erro ${LASTEXITCODE} na aplica√ß√£o" }
        }

        Write-Host "[‚úÖ] Pol√≠ticas aplicadas com sucesso!" -ForegroundColor Green
        Write-Host "[‚ö†Ô∏è] Recomenda-se reinicializa√ß√£o do sistema" -ForegroundColor Yellow
    }
    catch {
        Write-Host "[‚ùó] Falha na aplica√ß√£o: $($_.Exception.Message)" -ForegroundColor Red
    }
    finally {
        Invoke-PressKey
    }
}

function Restaurar-PoliticasPadrao {
    try {
        Write-Host "`n[üßπ] Iniciando restaura√ß√£o de seguran√ßa..." -ForegroundColor DarkYellow
        
        $confirm = Read-Host "`nEsta opera√ß√£o REMOVER√Å todas as pol√≠ticas personalizadas. Continuar? (S/N)"
        if ($confirm -ne 'S') { return }

        $gpoPaths = @(
            "$env:windir\System32\GroupPolicy",
            "$env:windir\System32\GroupPolicyUsers"
        )

        $gpoPaths | ForEach-Object {
            if (Test-Path $_) {
                Remove-Item $_ -Recurse -Force -ErrorAction Stop
                Write-Host "‚îú‚îÄ [$(Split-Path $_ -Leaf)] Removido" -ForegroundColor Green
            }
        }

        Write-Host "[‚úÖ] Restaura√ß√£o conclu√≠da!" -ForegroundColor Green
        Write-Host "[‚ö†Ô∏è] Execute a op√ß√£o 1 para atualizar as pol√≠ticas" -ForegroundColor Yellow
    }
    catch {
        Write-Host "[‚ùó] Erro na restaura√ß√£o: $($_.Exception.Message)" -ForegroundColor Red
    }
    finally {
        Invoke-PressKey
    }
}

function Reiniciar-Computador {
    try {
        Write-Host "`n[üö®] ATEN√á√ÉO: Esta opera√ß√£o √© irrevers√≠vel!" -ForegroundColor Red
        $confirmacao = Read-Host "`nCONFIRME com 'REINICIAR' para prosseguir"
        if ($confirmacao -eq 'REINICIAR') {
            Write-Host "[‚è≥] Rein√≠cio em 15 segundos..." -ForegroundColor Yellow
            shutdown /r /f /t 15
            exit
        }
        else {
            Write-Host "[‚ùå] Opera√ß√£o cancelada" -ForegroundColor Red
        }
    }
    finally {
        Invoke-PressKey
    }
}

# Main Execution
Testar-Admin

while ($true) {
    try {
        Show-Menu
        switch (Read-Host "`nSelecione uma op√ß√£o [1-8]") {
            '1' { Atualizar-PoliticasGrupo }
            '2' { Reiniciar-LojaWindows }
            '3' { Listar-ProgramasInstalados }
            '4' { Alterar-NomeComputador }
            '5' { Aplicar-GPOsFCT }
            '6' { Restaurar-PoliticasPadrao }
            '7' { Reiniciar-Computador }
            '8' { exit }
            default {
                Write-Host "[‚ùå] Op√ß√£o inv√°lida!" -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    }
    catch {
        Write-Host "[‚ùó] Erro n√£o tratado: $($_.Exception.Message)" -ForegroundColor Red
        Invoke-PressKey
    }
}
