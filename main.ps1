#Requires -Version 5
#Requires -RunAsAdministrator

<#
.SYNOPSIS
    Script Modular de Manuten√ß√£o Windows
.DESCRIPTION
    Execute com: irm RAW_URL_MAIN | iex
#>

function Show-Menu {
    Clear-Host
    # Logo UFG em ASCII Art
    Write-Host @"  

	 ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
	 ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù 
	 ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó
	 ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë
	 ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë     ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
	  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù      ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù 

    Universidade Federal de Goi√°s
"@ -ForegroundColor Blue

    Write-Host "`n          Campus Aparecida`n" -ForegroundColor Yellow
    Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Cyan
    Write-Host " 1. üîÑ Atualizar Pol√≠ticas de Grupo" -ForegroundColor Green
    Write-Host " 2. üõí Resetar Loja Windows" -ForegroundColor Blue
    Write-Host " 3. üìú Listar Programas Instalados" -ForegroundColor Magenta
    Write-Host " 4. üíª Alterar Nome do Computador" -ForegroundColor Cyan
    Write-Host " 5. üöÄ Reiniciar Computador" -ForegroundColor Red
    Write-Host " 6. üèõÔ∏è Aplicar GPOs FCT/UFG" -ForegroundColor DarkMagenta
    Write-Host " 7. üßπ Restaurar Pol√≠ticas Padr√£o" -ForegroundColor DarkYellow
    Write-Host " 8. ‚ùå Sair do Script" -ForegroundColor DarkGray
    Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Cyan
}

function Atualizar-PoliticasGrupo {
    Write-Host "`n[üîÑ] Atualizando pol√≠ticas de grupo..." -ForegroundColor Yellow
    try {
        $output = gpupdate /force 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Host "[‚úÖ] Pol√≠ticas atualizadas com sucesso!" -ForegroundColor Green
        } else {
            Write-Host "[‚ùå] Erro na atualiza√ß√£o: $output" -ForegroundColor Red
        }
    }
    catch {
        Write-Host "[‚ùó] Erro cr√≠tico: $($_.Exception.Message)" -ForegroundColor Red
    }
    Read-Host "`nPressione Enter para continuar..."
}

function Reiniciar-LojaWindows {
    Write-Host "`n[üõ†Ô∏è] Iniciando processo de reset da Loja Windows..." -ForegroundColor Yellow
    try {
        Write-Host "‚îú‚îÄ Etapa 1/3: Resetando permiss√µes..." -ForegroundColor Cyan
        Start-Process icacls -ArgumentList "`"C:\Program Files\WindowsApps`" /reset /t /c /q" -Wait -NoNewWindow
        
        Write-Host "‚îú‚îÄ Etapa 2/3: Executando WSReset..." -ForegroundColor Cyan
        Start-Process wsreset -NoNewWindow
        Write-Host "‚îÇ  Aguardando 30 segundos..." -ForegroundColor DarkGray
        Start-Sleep -Seconds 30
        
        Write-Host "‚îî‚îÄ Etapa 3/3: Finalizando processos..." -ForegroundColor Cyan
        taskkill /IM wsreset.exe /F *>$null
        taskkill /IM WinStore.App.exe /F *>$null
        
        Write-Host "[‚úÖ] Processo conclu√≠do com sucesso!`n" -ForegroundColor Green
    }
    catch {
        Write-Host "[‚ùó] Erro durante o processo: $($_.Exception.Message)" -ForegroundColor Red
    }
    Read-Host "Pressione Enter para continuar..."
}

function Listar-ProgramasInstalados {
    $dateStamp = Get-Date -Format "yyyyMMdd-HHmmss"
    $fileName = "apps-instalados-$dateStamp.txt"
    $documentsPath = [Environment]::GetFolderPath("MyDocuments")
    $filePath = Join-Path -Path $documentsPath -ChildPath $fileName

    Write-Host "`n[üîç] Gerando lista de programas instalados..." -ForegroundColor Yellow
    
    try {
        $apps = @()
        $paths = @(
            "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*",
            "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*"
        )

        foreach ($path in $paths) {
            $apps += Get-ItemProperty $path | Where-Object DisplayName -ne $null
        }

        $apps | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate |
            Sort-Object DisplayName |
            Format-Table -AutoSize |
            Out-File -FilePath $filePath -Width 200

        Write-Host "[üìÇ] Arquivo salvo em: $filePath" -ForegroundColor Green
        Write-Host "[‚ÑπÔ∏è] Total de programas listados: $($apps.Count)" -ForegroundColor Cyan
    }
    catch {
        Write-Host "[‚ùó] Erro ao gerar lista: $($_.Exception.Message)" -ForegroundColor Red
    }
    Read-Host "`nPressione Enter para continuar..."
}

function Alterar-NomeComputador {
    Write-Host "`n[‚ö†Ô∏è] Opera√ß√£o sens√≠vel - Requer reinicializa√ß√£o!" -ForegroundColor Red
    $currentName = $env:COMPUTERNAME
    $newName = Read-Host "`nDigite o novo nome do computador (atual: $currentName)"

    if (-not $newName -or $newName -notmatch "^[a-zA-Z0-9-]{1,15}$") {
        Write-Host "[‚ùå] Nome inv√°lido! Use at√© 15 caracteres (A-Z, 0-9, h√≠fen)" -ForegroundColor Red
        return
    }

    try {
        Rename-Computer -NewName $newName -Force -ErrorAction Stop
        Write-Host "[‚úÖ] Nome alterado para: $newName" -ForegroundColor Green
        
        $choice = Read-Host "`nDeseja reiniciar agora para aplicar as mudan√ßas? [S/N]"
        if ($choice -eq 'S') {
            shutdown /r /f /t 15
            exit
        }
    }
    catch {
        Write-Host "[‚ùó] Erro ao renomear: $($_.Exception.Message)" -ForegroundColor Red
    }
    Read-Host "`nPressione Enter para continuar..."
}

function Reiniciar-Computador {
    Write-Host "`n[‚ö†Ô∏è] ATEN√á√ÉO: Opera√ß√£o irrevers√≠vel!" -ForegroundColor Red
    $confirm = Read-Host "`nTem certeza que deseja reiniciar o computador? (Digite 'CONFIRMAR' para prosseguir)"
    
    if ($confirm -eq 'CONFIRMAR') {
        Write-Host "[‚è≥] Reiniciando em 15 segundos..." -ForegroundColor Yellow
        shutdown /r /f /t 15
        exit
    }
    else {
        Write-Host "[‚ùå] Opera√ß√£o cancelada pelo usu√°rio" -ForegroundColor Red
        Read-Host "`nPressione Enter para continuar..."
    }
}

function Aplicar-GPOsFCT {
    Write-Host "`n[üèõÔ∏è] Aplicando GPOs da FCT/UFG..." -ForegroundColor DarkMagenta
    try {
        Write-Host "‚îú‚îÄ Etapa 1/2: Aplicando GPO do usu√°rio..." -ForegroundColor Cyan
        & "\\fog\gpos\lgpo.exe" /t "\\fog\gpos\user.txt" 2>&1 | Out-Null
        if ($LASTEXITCODE -ne 0) { throw "Erro na aplica√ß√£o da GPO do usu√°rio" }

        Write-Host "‚îú‚îÄ Etapa 2/2: Aplicando GPO da m√°quina..." -ForegroundColor Cyan
        & "\\fog\gpos\lgpo.exe" /t "\\fog\gpos\machine.txt" 2>&1 | Out-Null
        if ($LASTEXITCODE -ne 0) { throw "Erro na aplica√ß√£o da GPO da m√°quina" }

        Write-Host "[‚úÖ] Pol√≠ticas aplicadas com sucesso!" -ForegroundColor Green
        Write-Host "[‚è≥] Finalizando em 5 segundos..." -ForegroundColor DarkGray
        Start-Sleep -Seconds 5
    }
    catch {
        Write-Host "[‚ùó] Falha cr√≠tica: $($_.Exception.Message)" -ForegroundColor Red
        Write-Host "[‚ö†Ô∏è] Verifique a conectividade com o servidor FOG" -ForegroundColor Yellow
    }
    Read-Host "`nPressione Enter para continuar..."
}

function Restaurar-PoliticasPadrao {
    Write-Host "`n[üßπ] Restaurando pol√≠ticas padr√£o do Windows..." -ForegroundColor DarkYellow
    try {
        $paths = @(
            "$env:windir\System32\GroupPolicy",
            "$env:windir\System32\GroupPolicyUsers"
        )

        foreach ($path in $paths) {
            if (Test-Path $path) {
                Remove-Item $path -Recurse -Force -ErrorAction Stop
                Write-Host "‚îú‚îÄ [$($path.Split('\')[-1])] Removido com sucesso" -ForegroundColor Green
            }
            else {
                Write-Host "‚îú‚îÄ [$($path.Split('\')[-1])] N√£o encontrado" -ForegroundColor DarkGray
            }
        }

        Write-Host "[‚úÖ] Restaura√ß√£o conclu√≠da com sucesso!" -ForegroundColor Green
        Write-Host "[‚ö†Ô∏è] Execute a op√ß√£o 1 para atualizar as pol√≠ticas" -ForegroundColor Yellow
        Start-Sleep -Seconds 3
    }
    catch {
        Write-Host "[‚ùó] Erro durante a opera√ß√£o: $($_.Exception.Message)" -ForegroundColor Red
    }
    Read-Host "`nPressione Enter para continuar..."
}

# Verifica√ß√£o de administrador
if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Host "[‚ö†Ô∏è] Elevando privil√©gios..." -ForegroundColor Yellow
    Start-Process powershell "-NoProfile -ExecutionPolicy Bypass -Command `"irm https://raw.githubusercontent.com/diegogyn/ScritpsDiversos/refs/heads/master/LabsFCT/main.ps1 | iex`"" -Verb RunAs
    exit
}

# Loop principal
while ($true) {
    try {
        Show-Menu
        $choice = Read-Host "`nDigite a op√ß√£o desejada [1-8]"
        
        switch ($choice) {
            '1' { Atualizar-PoliticasGrupo }
            '2' { Reiniciar-LojaWindows }
            '3' { Listar-ProgramasInstalados }
            '4' { Alterar-NomeComputador }
            '5' { Reiniciar-Computador }
            '6' { Aplicar-GPOsFCT }
            '7' { Restaurar-PoliticasPadrao }
            '8' { exit }
            default {
                Write-Host "[‚ùå] Op√ß√£o inv√°lida!" -ForegroundColor Red
                Start-Sleep -Seconds 2
            }
        }
    }
    catch {
        Write-Host "[‚ùó] Erro: $($_.Exception.Message)" -ForegroundColor Red
        Read-Host "Pressione Enter para continuar..."
    }
}
