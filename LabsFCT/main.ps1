#Requires -Version 5
#Requires -RunAsAdministrator

<#
.SYNOPSIS
    Script Modular de Manuten√ß√£o Windows
.DESCRIPTION
    Execute com: irm RAW_URL_MAIN | iex
#>

function Show-Menu {
    Clear-Host
    Write-Host ""
    Write-Host "‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ  ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñÑ ‚ñÑ‚ñà‚ñà‚ñà‚ñì ‚ñà‚ñà‚ñì‚ñà‚ñà‚ñà   ‚ñà     ‚ñà‚ñë ‚ñÑ‚ñÑ‚ñÑ       ‚ñà‚ñà‚ñÄ‚ñà‚ñà‚ñà  " -ForegroundColor Cyan
    Write-Host "‚ñí‚ñà‚ñà‚ñÄ ‚ñà‚ñà‚ñå‚ñí‚ñà‚ñà‚ñí  ‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà‚ñí‚ñÄ‚ñà‚ñÄ ‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñí‚ñì‚ñà‚ñë ‚ñà ‚ñë‚ñà‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñÑ    ‚ñì‚ñà‚ñà ‚ñí ‚ñà‚ñà‚ñí" -ForegroundColor Blue
    Write-Host "‚ñë‚ñà‚ñà   ‚ñà‚ñå‚ñí‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà    ‚ñì‚ñà‚ñà‚ñë‚ñì‚ñà‚ñà‚ñë ‚ñà‚ñà‚ñì‚ñí‚ñí‚ñà‚ñë ‚ñà ‚ñë‚ñà ‚ñí‚ñà‚ñà  ‚ñÄ‚ñà‚ñÑ  ‚ñì‚ñà‚ñà ‚ñë‚ñÑ‚ñà ‚ñí" -ForegroundColor Magenta
    Write-Host "‚ñë‚ñì‚ñà‚ñÑ   ‚ñå‚ñí‚ñà‚ñà   ‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà    ‚ñí‚ñà‚ñà ‚ñí‚ñà‚ñà‚ñÑ‚ñà‚ñì‚ñí ‚ñí‚ñë‚ñà‚ñë ‚ñà ‚ñë‚ñà ‚ñë‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà ‚ñí‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ  " -ForegroundColor Green
    Write-Host "‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñì ‚ñë ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë‚ñí‚ñà‚ñà‚ñí   ‚ñë‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñí ‚ñë  ‚ñë ‚ñë‚ñë‚ñà‚ñà‚ñí‚ñà‚ñà‚ñì ‚ñì‚ñà   ‚ñì‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñà‚ñí" -ForegroundColor Yellow
    Write-Host " ‚ñí‚ñí‚ñì  ‚ñí ‚ñë ‚ñí‚ñë‚ñí‚ñë‚ñí‚ñë ‚ñë ‚ñí‚ñë   ‚ñë  ‚ñë‚ñí‚ñì‚ñí‚ñë ‚ñë  ‚ñë ‚ñë ‚ñì‚ñë‚ñí ‚ñí  ‚ñí‚ñí   ‚ñì‚ñí‚ñà‚ñë‚ñë ‚ñí‚ñì ‚ñë‚ñí‚ñì‚ñë" -ForegroundColor Red
    Write-Host " ‚ñë ‚ñí  ‚ñí   ‚ñë ‚ñí ‚ñí‚ñë ‚ñë  ‚ñë      ‚ñë‚ñë‚ñí ‚ñë        ‚ñí ‚ñë ‚ñë   ‚ñí   ‚ñí‚ñí ‚ñë  ‚ñë‚ñí ‚ñë ‚ñí‚ñë" -ForegroundColor DarkCyan
    Write-Host " ‚ñë ‚ñë  ‚ñë ‚ñë ‚ñë ‚ñë ‚ñí  ‚ñë      ‚ñë   ‚ñë‚ñë          ‚ñë   ‚ñë   ‚ñë   ‚ñí     ‚ñë‚ñë   ‚ñë " -ForegroundColor Gray
    Write-Host "   ‚ñë        ‚ñë ‚ñë         ‚ñë                ‚ñë           ‚ñë  ‚ñë   ‚ñë    " -ForegroundColor DarkGray
    Write-Host " ‚ñë                                                              " -ForegroundColor DarkMagenta
    Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Cyan
    Write-Host " 1. üîÑ Atualizar Pol√≠ticas de Grupo" -ForegroundColor Green
    Write-Host " 2. üõí Resetar Loja Windows" -ForegroundColor Blue
    Write-Host " 3. üìú Listar Programas Instalados" -ForegroundColor Magenta
    Write-Host " 4. üíª Alterar Nome do Computador" -ForegroundColor Cyan
    Write-Host " 5. üöÄ Reiniciar Computador" -ForegroundColor Red
    Write-Host " 6. ‚ùå Sair do Script" -ForegroundColor DarkGray
    Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Cyan
}

function Update-GroupPolicies {
    Write-Host "`n[üîÑ] Atualizando pol√≠ticas de grupo..." -ForegroundColor Yellow
    try {
        $output = gpupdate /force 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Host "[‚úÖ] Pol√≠ticas atualizadas com sucesso!" -ForegroundColor Green
        } else {
            Write-Host "[‚ùå] Erro na atualiza√ß√£o: $output" -ForegroundColor Red
        }
    }
    catch {
        Write-Host "[‚ùó] Erro cr√≠tico: $($_.Exception.Message)" -ForegroundColor Red
    }
    Read-Host "`nPressione Enter para continuar..."
}

function Invoke-StoreReset {
    Write-Host "`n[üõ†Ô∏è] Iniciando processo de reset da Loja Windows..." -ForegroundColor Yellow
    try {
        Write-Host "‚îú‚îÄ Etapa 1/3: Resetando permiss√µes..." -ForegroundColor Cyan
        Start-Process icacls -ArgumentList "`"C:\Program Files\WindowsApps`" /reset /t /c /q" -Wait -NoNewWindow
        
        Write-Host "‚îú‚îÄ Etapa 2/3: Executando WSReset..." -ForegroundColor Cyan
        Start-Process wsreset -NoNewWindow
        Write-Host "‚îÇ  Aguardando 30 segundos..." -ForegroundColor DarkGray
        Start-Sleep -Seconds 30
        
        Write-Host "‚îî‚îÄ Etapa 3/3: Finalizando processos..." -ForegroundColor Cyan
        taskkill /IM wsreset.exe /F *>$null
        taskkill /IM WinStore.App.exe /F *>$null
        
        Write-Host "[‚úÖ] Processo conclu√≠do com sucesso!`n" -ForegroundColor Green
    }
    catch {
        Write-Host "[‚ùó] Erro durante o processo: $($_.Exception.Message)" -ForegroundColor Red
    }
    Read-Host "Pressione Enter para continuar..."
}

function Export-InstalledApps {
    $dateStamp = Get-Date -Format "yyyyMMdd-HHmmss"
    $fileName = "apps-instalados-$dateStamp.txt"
    $documentsPath = [Environment]::GetFolderPath("MyDocuments")
    $filePath = Join-Path -Path $documentsPath -ChildPath $fileName

    Write-Host "`n[üîç] Gerando lista de programas instalados..." -ForegroundColor Yellow
    
    try {
        $apps = @()
        $paths = @(
            "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*",
            "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*"
        )

        foreach ($path in $paths) {
            $apps += Get-ItemProperty $path | Where-Object DisplayName -ne $null
        }

        $apps | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate |
            Sort-Object DisplayName |
            Format-Table -AutoSize |
            Out-File -FilePath $filePath -Width 200

        Write-Host "[üìÇ] Arquivo salvo em: $filePath" -ForegroundColor Green
        Write-Host "[‚ÑπÔ∏è] Total de programas listados: $($apps.Count)" -ForegroundColor Cyan
    }
    catch {
        Write-Host "[‚ùó] Erro ao gerar lista: $($_.Exception.Message)" -ForegroundColor Red
    }
    Read-Host "`nPressione Enter para continuar..."
}

function Rename-PC {
    Write-Host "`n[‚ö†Ô∏è] Opera√ß√£o sens√≠vel - Requer reinicializa√ß√£o!" -ForegroundColor Red
    $currentName = $env:COMPUTERNAME
    $newName = Read-Host "`nDigite o novo nome do computador (atual: $currentName)"

    if (-not $newName -or $newName -notmatch "^[a-zA-Z0-9-]{1,15}$") {
        Write-Host "[‚ùå] Nome inv√°lido! Use at√© 15 caracteres (A-Z, 0-9, h√≠fen)" -ForegroundColor Red
        return
    }

    try {
        Rename-Computer -NewName $newName -Force -ErrorAction Stop
        Write-Host "[‚úÖ] Nome alterado para: $newName" -ForegroundColor Green
        
        $choice = Read-Host "`nDeseja reiniciar agora para aplicar as mudan√ßas? [S/N]"
        if ($choice -eq 'S') {
            shutdown /r /f /t 15
            exit
        }
    }
    catch {
        Write-Host "[‚ùó] Erro ao renomear: $($_.Exception.Message)" -ForegroundColor Red
    }
    Read-Host "`nPressione Enter para continuar..."
}

function Restart-Computer {
    Write-Host "`n[‚ö†Ô∏è] ATEN√á√ÉO: Opera√ß√£o irrevers√≠vel!" -ForegroundColor Red
    $confirm = Read-Host "`nTem certeza que deseja reiniciar o computador? (Digite 'CONFIRMAR' para prosseguir)"
    
    if ($confirm -eq 'CONFIRMAR') {
        Write-Host "[‚è≥] Reiniciando em 15 segundos..." -ForegroundColor Yellow
        shutdown /r /f /t 15
        exit
    }
    else {
        Write-Host "[‚ùå] Opera√ß√£o cancelada pelo usu√°rio" -ForegroundColor Red
        Read-Host "`nPressione Enter para continuar..."
    }
}

# Verifica√ß√£o de administrador
if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Host "[‚ö†Ô∏è] Elevando privil√©gios..." -ForegroundColor Yellow
    Start-Process powershell "-NoProfile -ExecutionPolicy Bypass -Command `"irm RAW_URL_MAIN | iex`"" -Verb RunAs
    exit
}

# Loop principal
while ($true) {
    try {
        Show-Menu
        $choice = Read-Host "`nDigite a op√ß√£o desejada [1-6]"
        
        switch ($choice) {
            '1' { Update-GroupPolicies }
            '2' { Invoke-StoreReset }
            '3' { Export-InstalledApps }
            '4' { Rename-PC }
            '5' { Restart-Computer }
            '6' { exit }
            default {
                Write-Host "[‚ùå] Op√ß√£o inv√°lida!" -ForegroundColor Red
                Start-Sleep -Seconds 2
            }
        }
    }
    catch {
        Write-Host "[‚ùó] Erro: $($_.Exception.Message)" -ForegroundColor Red
        Read-Host "Pressione Enter para continuar..."
    }
}
